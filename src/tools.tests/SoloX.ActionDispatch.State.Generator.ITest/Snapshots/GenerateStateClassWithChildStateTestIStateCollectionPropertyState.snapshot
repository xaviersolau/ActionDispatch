---------------------
StateCollectionPropertyState
---------------------
// ----------------------------------------------------------------------
// <copyright file="StateCollectionPropertyState.cs" company="SoloX Software">
// Copyright (c) SoloX Software. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// ----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using SoloX.ActionDispatch.Core.State;
using SoloX.ActionDispatch.Core.State.Impl;
using SoloX.ActionDispatch.State.Generator.ITest.Resources.State;

namespace target.name.space
{
    /// <summary>
    /// State implementation pattern.
    /// </summary>
    public class StateCollectionPropertyState : AStateBase<IStateCollectionPropertyState>, IStateCollectionPropertyState
    {
        private AStateBase<IStateCollection<ISimpleState>> children = new StateCollection<ISimpleState>();

        /// <inheritdoc/>
        public override IStateCollectionPropertyState Identity => this;

        /// <inheritdoc/>
        public ICollection<ISimpleState> Children => this.children.Identity;

        /// <inheritdoc/>
        protected override bool CheckPatch<TPatchState>(
            AStateBase<TPatchState> oldState,
            AStateBase<TPatchState> newState,
            out Action<IStateCollectionPropertyState> patcher)
        {
            if (base.CheckPatch(oldState, newState, out patcher))
            {
                return true;
            }

            if (this.children.Patch(oldState, newState, out var childrenPatched))
            {
                patcher = (s) => CastToImplementation(s).SetChildren(childrenPatched);
                return true;
            }

            patcher = null;
            return false;
        }

        /// <inheritdoc/>
        protected override bool LockChildrenAndCheckDirty()
        {
            var dirty = base.LockChildrenAndCheckDirty();

            var childrenOldVersion = this.children.Version;
            this.children.Lock();
            dirty |= childrenOldVersion != this.children.Version;

            return dirty;
        }

        /// <inheritdoc/>
        protected override AStateBase<IStateCollectionPropertyState> CreateAndClone(bool deep)
        {
            var clone = new StateCollectionPropertyState();

            this.CopyToStateCollectionPropertyState(clone, deep);

            return clone;
        }

        /// <summary>
        /// Copy current StatePattern data to the given state target.
        /// </summary>
        /// <param name="state">Target state where to copy current object data.</param>
        /// <param name="deep">Tells if we need to make a deep copy.</param>
        protected void CopyToStateCollectionPropertyState(StateCollectionPropertyState state, bool deep)
        {
            if (state == null)
            {
                throw new ArgumentNullException($"The argument {nameof(state)} was null.");
            }

            this.CopyToAStateBase(state, deep);

            if (deep)
            {
                state.children = this.children.DeepClone();
            }
            else
            {
                state.children = this.children;
            }
        }

        private static StateCollectionPropertyState CastToImplementation(IStateCollectionPropertyState state)
        {
            return (StateCollectionPropertyState)state;
        }

        private void SetChildren(AStateBase<IStateCollection<ISimpleState>> children)
        {
            this.children = children;
        }
    }
}

---------------------
StateFactoryProvider
---------------------
// ----------------------------------------------------------------------
// <copyright file="StateFactoryProvider.cs" company="SoloX Software">
// Copyright (c) SoloX Software. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// ----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using SoloX.ActionDispatch.Core.State;
using SoloX.ActionDispatch.Core.State.Impl;
using target.name.space;
using SoloX.ActionDispatch.State.Generator.ITest.Resources.State;

namespace target.name.space
{
    /// <summary>
    /// StateFactoryProviderPattern implementation.
    /// </summary>
    public class StateFactoryProvider : AStateFactoryProvider, IStateFactoryProvider
    {
        /// <inheritdoc/>
        public override void Register()
        {
            Register<IStateCollectionPropertyState, StateCollectionPropertyState>();
        }
    }
}

